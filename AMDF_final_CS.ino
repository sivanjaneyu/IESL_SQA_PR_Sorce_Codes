#include <LiquidCrystal.h>
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

unsigned long t1,t2,t3,t4;
const int Fs1=125;
const int CR=2;
const int p=6; //length of a and b (order of filter+1)
float b[6]={0.864246524017246,-4.32123262008623,8.64246524017246,-8.64246524017246,4.32123262008623,-0.864246524017246};
float a[6]={1,-4.70835055262605,8.87551850311413,-8.37268603379321,3.95242919071962,-0.746904488298868};
const float Fs=(Fs1/2);
const int t=5;
const int N=Fs1*t;
const int M=Fs*t;
int i, PR, SQ=1;

float x1[N]={0.0017836387974579,0.106216600499354,0.211553743687847,0.308753253496972,0.390581678033955,0.453874382095711,0.497727184195641,0.525304719536835,0.53931953257908,0.54203207703887,0.537059078862589,0.527113082510028,0.513098269467782,0.49546673047915,0.473766374800834,0.447545111689535,0.416350850401956,0.379731500194797,0.338139151811358,0.292930077481533,0.245460549435216,0.202511928821882,0.162727943411636,0.120683504284898,0.0795432466447574,0.0424718056943007,0.0108254536634229,-0.0158479001911739,-0.0380003466127883,-0.0556318856014201,-0.0691946079003677,-0.080496876482824,-0.0904428728353856,-0.0990325969580524,-0.105813958107526,-0.111691137770404,-0.118924589663176,-0.126610132299246,-0.134747765678614,-0.143789580544579,-0.153735576897141,-0.163681573249703,-0.174079660345562,-0.184025656698124,-0.193519562307387,-0.203013467916651,-0.210246919809423,-0.2161240994723,-0.222905460621774,-0.230138912514546,-0.238276545893914,-0.246866270016581,-0.257264357112441,-0.268566625694897,-0.278060531304161,-0.281677257250547,-0.273539623871178,-0.247770451503178,-0.199396741970265,-0.141529126828088,-0.0723592431034555,0.0180589055561951,0.118875141311705,0.219691377067216,0.311013707213463,0.386964952087569,0.444832567229746,0.48506864338329,0.509933634264694,0.522592175077045,0.525304719536835,0.520331721360554,0.509933634264694,0.495918821222448,0.477835191490518,0.454778563582307,0.427201028241114,0.39465049472364,0.357126963029885,0.315534614646445,0.27032554031662,0.222856012270304,0.174934393480689,0.128369046920969,0.0890371522540207,0.05558243724995,0.0225798129891776,-0.00680608532520889,-0.032123166949911,-0.0524672503983324,-0.0687425171570695,-0.0809489672261223,-0.0908949635786838,-0.0994846877013507,-0.107170230337421,-0.114403682230193,-0.12028086189307,-0.126158041555948,-0.133843584192018,-0.142433308314685,-0.151927213923948,-0.16187321027651,-0.171819206629071,-0.181313112238334,-0.190354927104299,-0.198944651226966,-0.207082284606335,-0.215219917985703,-0.222453369878475,-0.227878458798055,-0.232851456974335,-0.240084908867107,-0.249126723733072,-0.259524810828932,-0.27037498866809,-0.277608440560862,-0.289362799886617,-0.293431616576301,-0.269470807181494,-0.218384553188791,-0.142433308314685,-0.0624132467508939,0.0216756315025811,0.1202314135416,0.219691377067216,0.30920534424027,0.382444044654587,0.437599115336974,0.47467055628743,0.496370911965747,0.505412726831712,0.504960636088413,0.496823002709045,0.483712371153395,0.46698501365136,0.447093020946237,0.422228030064833,0.392842131750447,0.358483235259779,0.319151340592831,0.275298538492901,0.228281101189883,0.179003210170373,0.130177409894162,0.0831599725911434,0.039307170491213,0.00404409251394916,-0.0244376243138407,-0.0511109781684376,-0.0746196968199467,-0.0945116895250699,-0.110786956283807,-0.123897587839456,-0.134295674935316,-0.142885399057983,-0.151023032437352,-0.15916066581672,-0.167750389939387,-0.175435932575457,-0.182669384468229,-0.192163290077492,-0.203013467916651,-0.215219917985703,-0.228330549541353,-0.2418932718403,-0.25500390339595,-0.267210353465002,-0.279416803534055,-0.290719072116512,-0.301117159212371,-0.311515246308231,-0.3196528796876,-0.326886331580372,-0.336832327932933,-0.349490868745285,-0.362601500300934,-0.372095405910197,-0.372095405910197,-0.35582013915146,-0.317844516714407,-0.255455994139248,-0.170462934399176,-0.0682904264137712,0.0271007204221601,0.116162596851916,0.209745380714654,0.295190531198024,0.364812505665955,0.415898759658657,0.449353474662728,0.467889195137957,0.474218465544132,0.472410102570939,0.463368287704974,0.449353474662728,0.430365663444202,0.409117398509184,0.38425240762778,0.353962327826797,0.318247159106235,0.277558992209392,0.232349917879567,0.183976208346654,0.134246226583846,0.0845162448210382,0.0370467167747217,-0.00635399458191064,-0.0452337985055603,-0.075071787563245,-0.0976763247281576,-0.118472498919877,-0.135651947165211,-0.149666760207457,-0.160516938046615,-0.169106662169282,-0.176340114062054,-0.183573565954826,-0.191259108590896,-0.199848832713563,-0.20843855683623,-0.217480371702195,-0.225165914338265,-0.231947275487739,-0.240084908867107,-0.249126723733072,-0.257716447855739,-0.265401990491809,-0.272635442384581,-0.279868894277354,-0.286650255426827,-0.293883707319599,-0.30156924995567,-0.310158974078336,-0.318296607457705,-0.325982150093775,-0.33502396495974,-0.340901144622618,-0.33773650941953,-0.319200788944301,-0.279416803534055,-0.216576190215598,-0.132035221218825,-0.032123166949911,0.0741181577251784,0.177646937940478,0.268969268086725,0.336330788838165,0.38425240762778,0.422228030064833,0.447997202432834,0.462464106218378,0.46698501365136,0.463820378448272,0.454778563582307,0.439859569053465,0.419063394861745,0.392390041007148,0.360743688976271,0.328193155458796,0.293834258968129,0.253146092071287,0.208841199228058,0.162727943411636,0.117066778338512,0.0736660669818801,0.0338820815716339,-0.000928905662331612,-0.0298627132334198,-0.0533714318849289,-0.0719071523601572,-0.0868261468889996,-0.0972242339848594,-0.10490977662093,-0.112143228513702,-0.119376680406474,-0.127062223042544,-0.135651947165211,-0.145145852774474,-0.155543939870334,-0.16684620845279,-0.178600567778545,-0.189902836361001,-0.201205104943458,-0.209794829066124,-0.216576190215598,-0.224261732851669,-0.232399366231037,-0.240084908867107,-0.247318360759879,-0.254099721909353,-0.261333173802125,-0.269470807181494,-0.279868894277354,-0.291623253603108,-0.303829703672161,-0.313775700024722,-0.31694033522781,-0.310158974078336,-0.287554436913424,-0.243249544070195,-0.175435932575457,-0.0868261468889996,0.016250542583002,0.124752320974583,0.229637373419777,0.321863885052621,0.396006766953534,0.450709746892623,0.483712371153395,0.500891819398729,0.509481543521396,0.509933634264694,0.503604363858519,0.491397913789466,0.47467055628743,0.453422291352413,0.427201028241114,0.396458857696833,0.360743688976271,0.320507612822726,0.276654810722796,0.235062462339356,0.194826386185812,0.150521493342583,0.105312419012758,0.0614596169128273,0.0216756315025811,-0.0135874464746827,-0.0438775262756656,-0.0687425171570695,-0.0890866006054908,-0.105813958107526,-0.118924589663176,-0.128418495272439,-0.135651947165211,-0.142885399057983,-0.149666760207457,-0.156900212100229,-0.165037845479597,-0.173627569602264,-0.182669384468229,-0.192615380820791,-0.202561377173352,-0.212959464269212,-0.222905460621774,-0.232851456974335,-0.240084908867107,-0.245509997786686,-0.25229135893616,-0.259524810828932,-0.266758262721704,-0.274443805357775,-0.28348562022374,-0.293883707319599,-0.305185975902056,-0.315584062997915,-0.319200788944301,-0.311063155564933,-0.291623253603108,-0.257264357112441,-0.19804046974037,-0.116212045203386,-0.017656263164367,0.0885850615107225,0.193470113955917,0.287957079305252,0.366620868639148,0.425844756011219,0.466532922908062,0.491397913789466,0.501796000885326,0.502248091628624,0.501343910142027,0.496823002709045,0.485520734126588,0.468793376624553,0.447093020946237,0.42041966709164,0.388773315060762,0.351249783367007,0.308753253496972,0.26263999768055,0.214266288147637,0.170413486047706,0.13062950063746,0.0885850615107225,0.0478968946138797,0.0103733629201247,-0.0226292613406477,-0.0506588874251394,-0.0737155153333502,-0.0922512358085786,-0.107170230337421,-0.119376680406474,-0.129774767502334,-0.137912400881702,-0.144693762031176,-0.152379304667246,-0.161421119533211,-0.171367115885773,-0.182217293724931,-0.193519562307387,-0.204369740146545,-0.215219917985703,-0.226070095824862,-0.236468182920721,-0.245962088529985,-0.25500390339595,-0.261333173802125,-0.266306171978406,-0.272183351641283,-0.278964712790757,-0.288006527656722,-0.298404614752582,-0.310611064821635,-0.322365424147389,-0.329598876040161,-0.326886331580372,-0.308350611105143,-0.269018716438195,-0.218384553188791,-0.153283486153843,-0.0637695189807887,0.0402113519778095,0.148261039626092,0.249981456868199,0.338139151811358,0.407761126279289,0.458847380271992,0.492302095276062,0.511289906494589,0.518523358387361,0.51626290467087,0.507673180548203,0.493658367505957,0.475122647030729,0.451161837635921,0.422228030064833,0.388321224317464,0.348989329650516,0.304684436807287,0.256762818017673,0.20567656402497,0.153234037802373,0.101243602323074,0.0564866187365465,0.0176068148128968,-0.0217250798540512,-0.0583444300612097,-0.0904428728353856,-0.117568317433281,-0.140172854598193,-0.158708575073422,-0.173627569602264,-0.186286110414615,-0.197136288253773,-0.207082284606335,-0.217028280958896,-0.225618005081563,-0.232851456974335,-0.241441181097002,-0.251387177449564,-0.262237355288722,-0.27308753312788,-0.283937710967038,-0.293883707319599,-0.303377612928863,-0.311967337051529,-0.320104970430898,-0.327790513066968,-0.331859329756653,-0.33502396495974,-0.340449053879319,-0.348586687258688,-0.358984774354548,-0.370739133680302,-0.38158931151946,-0.386562309695741,-0.380233039289566,-0.35582013915146,-0.307898520361845,-0.235111910690827,-0.141529126828088,-0.0493026151952446,0.0420197149510025,0.142383859963215,0.237775006799146,0.319151340592831,0.381991953911288,0.426296846754517,0.453422291352413,0.46698501365136,0.470601739597746,0.466532922908062,0.4565869265555,0.442572113513254,0.424940574524623,0.40233603735971,0.374306411275218,0.340399605527849,0.3015198016042,0.257666999504269,0.210197471457953,0.160015398951846,0.10983332644574,0.0610075261695291,0.0157984518397037,-0.0253418058004372,-0.0574402485746132,-0.0827573301993153,-0.105361867364228,-0.123897587839456,-0.138364491625,-0.149666760207457,-0.158256484330124,-0.165942026966194,-0.173175478858966,-0.179504749265141,-0.185834019671317,-0.192163290077492,-0.197588378997072,-0.202561377173352,-0.208890647579528,-0.216576190215598,-0.224713823594967,-0.233303547717634,-0.241441181097002,-0.249126723733072,-0.256360175625844,-0.26268944603202,-0.268566625694897,-0.274895896101073,-0.282129347993845,-0.28845861840002,-0.295239979549494,-0.304281794415459,-0.311967337051529,-0.313775700024722,-0.303829703672161,-0.274895896101073,-0.222905460621774,-0.147406306490965,-0.0529193411416306,0.053774074276757,0.162727943411636,0.253146092071287,0.325932701742305,0.392842131750447,0.445736748716342,0.482808189666799,0.504960636088413,0.515358723184273,0.516714995414168,0.510837815751291,0.499535547168834,0.483260280410097,0.462464106218378,0.436694933850377,0.409569489252482,0.379279409451499,0.342207968501042,0.299259347887708,0.25224191058469,0.202964019565181,0.152781947059074,0.103956146782863,0.0578428909664413,0.0157984518397037,-0.0208208983674547,-0.0524672503983324,-0.0759759690498415,-0.0936075080384734,-0.108526502567316,-0.121185043379667,-0.131583130475527,-0.140624945341492,-0.14876257872086,-0.156900212100229,-0.165489936222896,-0.174531751088861,-0.184477747441422,-0.194875834537282,-0.20572601237644,-0.215219917985703,-0.223357551365072,-0.233303547717634,-0.243701634813493,-0.253647631166055,-0.263593627518616,-0.272183351641283,-0.280320985020652,-0.288006527656722,-0.296144161036091,-0.305185975902056,-0.316036153741214,-0.325077968607179,-0.333215601986547,-0.340449053879319,-0.340901144622618,-0.32733842232367,-0.293431616576301,-0.235564001434125,-0.154187667640439,-0.0547277041148236,0.0551303465066518,0.164988397128127,0.265352542140339,0.342207968501042,0.398719311413324,0.445284657973044,0.478287282233816,0.499083456425536,0.508577362034799,0.509933634264694,0.504508545345115,0.493658367505957,0.477835191490518,0.457491108042097,0.432174026417395,0.401883946616412,0.370237594585534,0.336330788838165,0.295642621941322,0.249529366124901,0.200251475105391}; //original signal
//float x1[N];  //real-time sensing
float x2[N]; //CS signal
float x3[N]; //Normalsed signal
float x4[N];  //Filtered signal
float x5[N];  // Normalized signals
const int k=250; // length of partial AMDF
float th=-0.25; //Threshold for threshold crossing of derivative
int ZC[M];
int AMDF_zc[k]; //Threshold crossings of AMDF_ds
int num,N1,N2,Z;     //Number of th crossings
float AMDF_val[k];     //AMDF function
float AMDF_d[k];   //Derivative of AMDF
float AMDF_neg[k];   //Negative of AMDF
float AMDF_ds[k];  //Smoothed derivative of AMDF
// float der[k],der1[k],der2[k];
float xd[M - 1], xs[M- 1];

void setup() {
  Serial.begin(9600);
  Serial1.begin(9600);
  lcd.begin(16, 2);
  lcd.setCursor(0, 0);
  lcd.print("Initializing...");
  delay(1000);
}

void loop() {
  t1=micros();

// //Real-time sensing
//    i=0;
//    while(i<samples)
//    {
//      x1[i]=analogRead(A0);
//      delay(8);
//      i=i+1;
//    }

  DBBD(x1,N,CR,x2);
//  normalize_amplitude(x2, M, x3);
  filtfilt(x2, M, a, b, p, x4);

  derivative(x4, M, xd);
  MAF(xd, M - 1, 3, xs);
  int NPZCR = msm_zerocros(xs, M - 1, ZC);

  t2 = micros();
  AMDF(x4, M, k, AMDF_val);
  t3 = micros();
  mean_removal(AMDF_val, k, AMDF_val);
  normalize_amplitude(AMDF_val, k, AMDF_val);
  for (i = 0; i < k; i++) AMDF_neg[i] = -AMDF_val[i];
  derivative(AMDF_neg, k, AMDF_ds);
  k_lag(AMDF_ds, k, 5, AMDF_ds);
  normalize_amplitude(AMDF_ds, k, AMDF_ds);

  num = neg_th_cross(AMDF_ds, th, k, AMDF_zc);
  if (num < 2) {
    SQ = 1;
    PR = 0;
  } else {
    minima_correction(AMDF_val, k, AMDF_zc, num, AMDF_zc);
    PR = ceil(Fs * 60.0 / (AMDF_zc[0] + 1));
  }

  t4 = micros();
  N1 = neg_th_cross(x4, 0.1, M, ZC);
  N2 = neg_th_cross(x4, -0.1, M, ZC);
  Z = abs(N1 - N2);

  // Magnitude computation
  float max_val = x4[0], min_val = x4[0];
  for (int i = 1; i < M; i++) {
    if (x4[i] > max_val) max_val = x4[i];
    if (x4[i] < min_val) min_val = x4[i];
  }
  float mag = max_val - min_val;

  // Signal Quality Check
  if (NPZCR > 8 && NPZCR <= 38) SQ = 0;
  else if (NPZCR > 38 && NPZCR < 168) SQ = 1;
  else if (num < 2 || PR < 30 || PR > 300) SQ = 1;
  else if ((AMDF_val[AMDF_zc[0]] > -0.13 && AMDF_val[AMDF_zc[1]] > -0.35) && mag > 64) SQ = 1;
  else if ((AMDF_val[AMDF_zc[0]] < -0.37 && AMDF_val[AMDF_zc[1]] < -0.34) && mag <= 9) SQ = 0;
  else {
    for (int i = 0; i < num - 2; i++) {
      int d1 = AMDF_zc[i + 1] - AMDF_zc[i];
      int d2 = AMDF_zc[i + 2] - AMDF_zc[i + 1];
      int dist = abs(d2 - d1);
      if (dist > 8) {
        SQ = 1;
        break;
      } else {
        SQ = 0;
      }
    }
  }

  // Serial output
  Serial.print("PR is,"); Serial.println(PR);
  Serial.print("Signal Quality is,"); Serial.println(SQ);

  Serial1.print("PR is,"); Serial1.println(PR);
  Serial1.print("Signal Quality is,"); Serial1.println(SQ);

  // LCD Display
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("PR (bpm): "); lcd.print(PR);
  lcd.setCursor(0, 1);
  lcd.print("SQA: "); lcd.print((SQ == 0) ? "Good Quality" : "Bad Quality");
//  lcd.setCursor(0, 0);
//  lcd.print("CS Matrix: "); lcd.print("DBBD");
//  lcd.setCursor(0, 1);
//  lcd.print("CR: "); lcd.print(CR);

  
  delay(1000);

}

// Supporting Functions 

void DBBD(float x[], int N, int CR, float y[]){

//  Function to find CS measurements using DBBD sensing matrix
//  Input: signal x with length N
//  Output: signal y compressed by CR factor
//  New length: M=floor(N/CR)

    int i,j,M,temp;
    M=floor(N/CR);

    for (int j=0;j<M;j++){
      y[j]=0;
      for (int i=0;i<CR;i++){
        temp=j*CR+i;
        y[j]=y[j]+x[temp];
      }
    }
}


void normalize_amplitude(float x[], int N, float y[]) {
  float max_x = fabs(x[0]);
  for (int i = 1; i < N; i++) max_x = max(max_x, fabs(x[i]));
  for (int i = 0; i < N; i++) y[i] = x[i] / max_x;
}

void AMDF(float x[], int N, int M, float y[]) {
  for (int i = 0; i < M; i++) {
    float sum = 0;
    for (int j = 0; j < N - i - 1; j++) sum += fabs(x[j] - x[j + i]);
    y[i] = sum / (N - i - 1);
  }
}

void mean_removal(float x[], int N, float y[]) {
  float sum = 0;
  for (int i = 0; i < N; i++) sum += x[i];
  float avg = sum / N;
  for (int i = 0; i < N; i++) y[i] = x[i] - avg;
}

void k_lag(float x[], int N, int p, float y[]) {
  for (int i = 0; i < p; i++) y[i] = x[p];
  for (int i = p; i < N; i++) y[i] = x[i];
}

int neg_th_cross(float x[], float th, int N, int y[]) {
  int j = 0;
  for (int i = 0; i < N - 1; i++) {
    if (x[i] > th && x[i + 1] <= th) y[j++] = i;
  }
  if (j == 0) {
    y[0] = N - 1;
    return 1;
  }
  return j;
}

void minima_correction(float x[], int N, int loc[], int M, int y[]) {
  for (int i = 0; i < M; i++) {
    float minima = x[loc[i]];
    y[i] = loc[i];
    int start = max(0, loc[i] - 3);
    int end = min(N - 1, loc[i] + 3);
    for (int j = start; j <= end; j++) {
      if (x[j] < minima) {
        minima = x[j];
        y[i] = j;
      }
    }
  }
}

void filtfilt(float x[], int N, float a[], float b[], int p, float y[]) {
  float z[N];
  filter(x, N, a, b, p, z);
  for (int i = 0; i < N; i++) y[i] = z[N - i - 1];
  filter(y, N, a, b, p, z);
  for (int i = 0; i < N; i++) y[i] = z[N - i - 1];
}

void filter(float x[], int N, float a[], float b[], int p, float y[]) {
  for (int i = 0; i < N; i++) {
    float val = 0;
    for (int j = 1; j < p && i >= j; j++) {
      val += b[j] * x[i - j] - a[j] * y[i - j];
    }
    y[i] = b[0] * x[i] + val;
  }
}

void MAF(float x[], int N, int p, float y[]) {
  float a[p], b[p];
  for (int i = 0; i < p; i++) {
    a[i] = (i == 0) ? 1 : 0;
    b[i] = 1.0 / p;
  }
  filtfilt(x, N, a, b, p, y);
}

void derivative(float x[], int N, float y[]) {
  for (int i = 0; i < N - 1; i++) y[i] = x[i + 1] - x[i];
  y[N - 1] = y[N - 2];
}

int msm_zerocros(float* signal, int len, int* locations) {
  int count = 0;
  for (int i = 1; i < len; i++) {
    if (signal[i] * signal[i - 1] <= 0) {
      locations[count++] = i;
    }
  }
  return count;
}
